[{"data":1,"prerenderedAt":300},["ShallowReactive",2],{"article":3},[4],{"id":5,"title":6,"body":7,"date":289,"description":290,"extension":291,"image":292,"meta":293,"navigation":294,"path":295,"seo":296,"stem":297,"tags":298,"__hash__":299},"article/article/bates-shuffle.md","Demystifying the Bates Shuffle: True Randomness",{"type":8,"value":9,"toc":282},"minimark",[10,19,27,32,44,51,55,239,242,246,259,263,271,275,278],[11,12,13,14,18],"p",{},"When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more ",[15,16,17],"em",{},"natural","?",[11,20,21,22,26],{},"Enter the ",[23,24,25],"strong",{},"Bates Shuffle",".",[28,29,31],"h2",{"id":30},"what-is-the-bates-shuffle","What Is the Bates Shuffle?",[11,33,34,35,38,39,43],{},"The Bates Shuffle is derived from statistical methods, specifically from the ",[23,36,37],{},"Bates distribution",", which is formed by averaging ",[40,41,42],"code",{},"n"," uniform random variables. Instead of a flat random distribution like Fisher-Yates, this shuffle produces a smoother, bell-shaped randomness — similar to a Gaussian curve.",[11,45,46,47,50],{},"In web development, this can be useful in cases where ",[23,48,49],{},"uniform randomness looks \"too random\""," and jarring, especially in animations, transitions, or procedural content.",[28,52,54],{"id":53},"implementation","Implementation",[56,57,63],"pre",{"className":58,"code":59,"filename":60,"language":61,"meta":62,"style":62},"language-js shiki shiki-themes github-light github-dark","function batesShuffle (n, samples = 3) {\n  return Array.from({ length: n}, (_,i) => ({\n    index: i,\n    value: Array.from({ length: samples }, Math.random)\n      .reduce((a, b) => a + b)\n      .sort((a, b) => a.value - b.value)\n      .map(item => item.index);\n}\n","bates-shuffle","js","",[40,64,65,101,134,140,151,184,213,233],{"__ignoreMap":62},[66,67,70,74,78,82,85,88,91,94,98],"span",{"class":68,"line":69},"line",1,[66,71,73],{"class":72},"szBVR","function",[66,75,77],{"class":76},"sScJk"," batesShuffle",[66,79,81],{"class":80},"sVt8B"," (",[66,83,42],{"class":84},"s4XuR",[66,86,87],{"class":80},", ",[66,89,90],{"class":84},"samples",[66,92,93],{"class":72}," =",[66,95,97],{"class":96},"sj4cs"," 3",[66,99,100],{"class":80},") {\n",[66,102,104,107,110,113,116,119,122,125,128,131],{"class":68,"line":103},2,[66,105,106],{"class":72},"  return",[66,108,109],{"class":80}," Array.",[66,111,112],{"class":76},"from",[66,114,115],{"class":80},"({ length: n}, (",[66,117,118],{"class":84},"_",[66,120,121],{"class":80},",",[66,123,124],{"class":84},"i",[66,126,127],{"class":80},") ",[66,129,130],{"class":72},"=>",[66,132,133],{"class":80}," ({\n",[66,135,137],{"class":68,"line":136},3,[66,138,139],{"class":80},"    index: i,\n",[66,141,143,146,148],{"class":68,"line":142},4,[66,144,145],{"class":80},"    value: Array.",[66,147,112],{"class":76},[66,149,150],{"class":80},"({ length: samples }, Math.random)\n",[66,152,154,157,160,163,166,168,171,173,175,178,181],{"class":68,"line":153},5,[66,155,156],{"class":80},"      .",[66,158,159],{"class":76},"reduce",[66,161,162],{"class":80},"((",[66,164,165],{"class":84},"a",[66,167,87],{"class":80},[66,169,170],{"class":84},"b",[66,172,127],{"class":80},[66,174,130],{"class":72},[66,176,177],{"class":80}," a ",[66,179,180],{"class":72},"+",[66,182,183],{"class":80}," b)\n",[66,185,187,189,192,194,196,198,200,202,204,207,210],{"class":68,"line":186},6,[66,188,156],{"class":80},[66,190,191],{"class":76},"sort",[66,193,162],{"class":80},[66,195,165],{"class":84},[66,197,87],{"class":80},[66,199,170],{"class":84},[66,201,127],{"class":80},[66,203,130],{"class":72},[66,205,206],{"class":80}," a.value ",[66,208,209],{"class":72},"-",[66,211,212],{"class":80}," b.value)\n",[66,214,216,218,221,224,227,230],{"class":68,"line":215},7,[66,217,156],{"class":80},[66,219,220],{"class":76},"map",[66,222,223],{"class":80},"(",[66,225,226],{"class":84},"item",[66,228,229],{"class":72}," =>",[66,231,232],{"class":80}," item.index);\n",[66,234,236],{"class":68,"line":235},8,[66,237,238],{"class":80},"}\n",[11,240,241],{},"Here, each index is given an averaged “random value” that dictates its position. More samples = smoother randomness.",[28,243,245],{"id":244},"when-should-you-use-it","When should you use it?",[247,248,249,253,256],"ul",{},[250,251,252],"li",{},"UI Animations: Staggering animations based on weighted randomness can appear more organic.",[250,254,255],{},"Music/Media Shuffling: Avoiding \"bad luck\" when clicking the shuffle button.",[250,257,258],{},"Procedural Generation: Games or simulations where uniform randomness looks artificial.",[28,260,262],{"id":261},"downsides","Downsides",[247,264,265,268],{},[250,266,267],{},"Performance: Slower than fisher-yates",[250,269,270],{},"Bias: Favors the center of the range",[28,272,274],{"id":273},"summary","Summary",[11,276,277],{},"While not a replacement for fisher-yates in most cases, the bates shuffle is a hidden gem for frontend devs aiming for natural-feeling randomness. Sometimes, math that looks less random ends up feeling more real.",[279,280,281],"style",{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":62,"searchDepth":103,"depth":103,"links":283},[284,285,286,287,288],{"id":30,"depth":103,"text":31},{"id":53,"depth":103,"text":54},{"id":244,"depth":103,"text":245},{"id":261,"depth":103,"text":262},{"id":273,"depth":103,"text":274},"2025-07-22T00:00:00.000Z","When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more natural?","md",null,{},true,"/article/bates-shuffle",{"title":6,"description":290},"article/bates-shuffle",[],"KiDmZ7g-p2cWv21hoG-CktDVY75ku-5XmQalcj_MdZE",1753182585258]