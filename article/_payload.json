[{"data":1,"prerenderedAt":328},["ShallowReactive",2],{"article":3},[4],{"id":5,"title":6,"body":7,"date":317,"description":318,"extension":319,"image":320,"meta":321,"navigation":322,"path":323,"seo":324,"stem":325,"tags":326,"__hash__":327},"article/article/bates-shuffle.md","Demystifying the Bates Shuffle: True Randomness",{"type":8,"value":9,"toc":310},"minimark",[10,19,27,32,44,51,55,267,270,274,287,291,299,303,306],[11,12,13,14,18],"p",{},"When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more ",[15,16,17],"em",{},"natural","?",[11,20,21,22,26],{},"Enter the ",[23,24,25],"strong",{},"Bates Shuffle",".",[28,29,31],"h2",{"id":30},"what-is-the-bates-shuffle","What Is the Bates Shuffle?",[11,33,34,35,38,39,43],{},"The Bates Shuffle is derived from statistical methods, specifically from the ",[23,36,37],{},"Bates distribution",", which is formed by averaging ",[40,41,42],"code",{},"n"," uniform random variables. Instead of a flat random distribution like Fisher-Yates, this shuffle produces a smoother, bell-shaped randomness — similar to a Gaussian curve.",[11,45,46,47,50],{},"In web development, this can be useful in cases where ",[23,48,49],{},"uniform randomness looks \"too random\""," and jarring, especially in animations, transitions, or procedural content.",[28,52,54],{"id":53},"implementation","Implementation",[56,57,58],"code-block",{},[59,60,66],"pre",{"className":61,"code":62,"filename":63,"language":64,"meta":65,"style":65},"language-js shiki shiki-themes github-light-high-contrast","function batesShuffle(n, samples = 3) {\n    return Array.from({ length: n }, (_, i) => ({\n        index: i,\n        value:\n            Array.from({ length: samples }, Math.random).reduce(\n                (a, b) => a + b\n            ) / samples,\n    }))\n        .sort((a, b) => a.value - b.value)\n        .map((item) => item.index);\n}\n","bates-shuffle","js","",[40,67,68,104,136,142,148,165,192,204,210,241,261],{"__ignoreMap":65},[69,70,73,77,81,85,88,91,94,97,101],"span",{"class":71,"line":72},"line",1,[69,74,76],{"class":75},"sTJeM","function",[69,78,80],{"class":79},"s3dhs"," batesShuffle",[69,82,84],{"class":83},"sigWx","(",[69,86,42],{"class":87},"sV4o_",[69,89,90],{"class":83},", ",[69,92,93],{"class":87},"samples",[69,95,96],{"class":75}," =",[69,98,100],{"class":99},"sacAq"," 3",[69,102,103],{"class":83},") {\n",[69,105,107,110,113,116,119,122,124,127,130,133],{"class":71,"line":106},2,[69,108,109],{"class":75},"    return",[69,111,112],{"class":83}," Array.",[69,114,115],{"class":79},"from",[69,117,118],{"class":83},"({ length: n }, (",[69,120,121],{"class":87},"_",[69,123,90],{"class":83},[69,125,126],{"class":87},"i",[69,128,129],{"class":83},") ",[69,131,132],{"class":75},"=>",[69,134,135],{"class":83}," ({\n",[69,137,139],{"class":71,"line":138},3,[69,140,141],{"class":83},"        index: i,\n",[69,143,145],{"class":71,"line":144},4,[69,146,147],{"class":83},"        value:\n",[69,149,151,154,156,159,162],{"class":71,"line":150},5,[69,152,153],{"class":83},"            Array.",[69,155,115],{"class":79},[69,157,158],{"class":83},"({ length: samples }, Math.random).",[69,160,161],{"class":79},"reduce",[69,163,164],{"class":83},"(\n",[69,166,168,171,174,176,179,181,183,186,189],{"class":71,"line":167},6,[69,169,170],{"class":83},"                (",[69,172,173],{"class":87},"a",[69,175,90],{"class":83},[69,177,178],{"class":87},"b",[69,180,129],{"class":83},[69,182,132],{"class":75},[69,184,185],{"class":83}," a ",[69,187,188],{"class":75},"+",[69,190,191],{"class":83}," b\n",[69,193,195,198,201],{"class":71,"line":194},7,[69,196,197],{"class":83},"            ) ",[69,199,200],{"class":75},"/",[69,202,203],{"class":83}," samples,\n",[69,205,207],{"class":71,"line":206},8,[69,208,209],{"class":83},"    }))\n",[69,211,213,216,219,222,224,226,228,230,232,235,238],{"class":71,"line":212},9,[69,214,215],{"class":83},"        .",[69,217,218],{"class":79},"sort",[69,220,221],{"class":83},"((",[69,223,173],{"class":87},[69,225,90],{"class":83},[69,227,178],{"class":87},[69,229,129],{"class":83},[69,231,132],{"class":75},[69,233,234],{"class":83}," a.value ",[69,236,237],{"class":75},"-",[69,239,240],{"class":83}," b.value)\n",[69,242,244,246,249,251,254,256,258],{"class":71,"line":243},10,[69,245,215],{"class":83},[69,247,248],{"class":79},"map",[69,250,221],{"class":83},[69,252,253],{"class":87},"item",[69,255,129],{"class":83},[69,257,132],{"class":75},[69,259,260],{"class":83}," item.index);\n",[69,262,264],{"class":71,"line":263},11,[69,265,266],{"class":83},"}\n",[11,268,269],{},"Here, each index is given an averaged “random value” that dictates its position. More samples = smoother randomness.",[28,271,273],{"id":272},"when-should-you-use-it","When should you use it?",[275,276,277,281,284],"ul",{},[278,279,280],"li",{},"UI Animations: Staggering animations based on weighted randomness can appear more organic.",[278,282,283],{},"Music/Media Shuffling: Avoiding \"bad luck\" when clicking the shuffle button.",[278,285,286],{},"Procedural Generation: Games or simulations where uniform randomness looks artificial.",[28,288,290],{"id":289},"downsides","Downsides",[275,292,293,296],{},[278,294,295],{},"Performance: Slower than fisher-yates",[278,297,298],{},"Bias: Favors the center of the range",[28,300,302],{"id":301},"summary","Summary",[11,304,305],{},"While not a replacement for fisher-yates in most cases, the bates shuffle is a hidden gem for frontend devs aiming for natural-feeling randomness. Sometimes, math that looks less random ends up feeling more real.",[307,308,309],"style",{},"html pre.shiki code .sTJeM, html code.shiki .sTJeM{--shiki-default:#A0111F}html pre.shiki code .s3dhs, html code.shiki .s3dhs{--shiki-default:#622CBC}html pre.shiki code .sigWx, html code.shiki .sigWx{--shiki-default:#0E1116}html pre.shiki code .sV4o_, html code.shiki .sV4o_{--shiki-default:#702C00}html pre.shiki code .sacAq, html code.shiki .sacAq{--shiki-default:#023B95}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"title":65,"searchDepth":106,"depth":106,"links":311},[312,313,314,315,316],{"id":30,"depth":106,"text":31},{"id":53,"depth":106,"text":54},{"id":272,"depth":106,"text":273},{"id":289,"depth":106,"text":290},{"id":301,"depth":106,"text":302},"2025-07-22T00:00:00.000Z","When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more natural?","md",null,{},true,"/article/bates-shuffle",{"title":6,"description":318},"article/bates-shuffle",[],"XW9OzJxrQqSSTV4nNGLwUshFEv_Iuetuzcn8MreU3jg",1753427102019]