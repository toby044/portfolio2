[{"data":1,"prerenderedAt":324},["ShallowReactive",2],{"article":3},[4],{"id":5,"title":6,"body":7,"date":313,"description":314,"extension":315,"image":316,"meta":317,"navigation":318,"path":319,"seo":320,"stem":321,"tags":322,"__hash__":323},"article/article/bates-shuffle.md","Demystifying the Bates Shuffle: True Randomness",{"type":8,"value":9,"toc":306},"minimark",[10,19,27,32,44,51,55,263,266,270,283,287,295,299,302],[11,12,13,14,18],"p",{},"When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more ",[15,16,17],"em",{},"natural","?",[11,20,21,22,26],{},"Enter the ",[23,24,25],"strong",{},"Bates Shuffle",".",[28,29,31],"h2",{"id":30},"what-is-the-bates-shuffle","What Is the Bates Shuffle?",[11,33,34,35,38,39,43],{},"The Bates Shuffle is derived from statistical methods, specifically from the ",[23,36,37],{},"Bates distribution",", which is formed by averaging ",[40,41,42],"code",{},"n"," uniform random variables. Instead of a flat random distribution like Fisher-Yates, this shuffle produces a smoother, bell-shaped randomness — similar to a Gaussian curve.",[11,45,46,47,50],{},"In web development, this can be useful in cases where ",[23,48,49],{},"uniform randomness looks \"too random\""," and jarring, especially in animations, transitions, or procedural content.",[28,52,54],{"id":53},"implementation","Implementation",[56,57,62],"pre",{"className":58,"code":59,"language":60,"meta":61,"style":61},"language-js shiki shiki-themes github-light github-dark","function batesShuffle(n, samples = 3) {\n    return Array.from({ length: n }, (_, i) => ({\n        index: i,\n        value:\n            Array.from({ length: samples }, Math.random).reduce(\n                (a, b) => a + b\n            ) / samples,\n    }))\n        .sort((a, b) => a.value - b.value)\n        .map((item) => item.index);\n}\n","js","",[40,63,64,100,132,138,144,161,188,200,206,237,257],{"__ignoreMap":61},[65,66,69,73,77,81,84,87,90,93,97],"span",{"class":67,"line":68},"line",1,[65,70,72],{"class":71},"szBVR","function",[65,74,76],{"class":75},"sScJk"," batesShuffle",[65,78,80],{"class":79},"sVt8B","(",[65,82,42],{"class":83},"s4XuR",[65,85,86],{"class":79},", ",[65,88,89],{"class":83},"samples",[65,91,92],{"class":71}," =",[65,94,96],{"class":95},"sj4cs"," 3",[65,98,99],{"class":79},") {\n",[65,101,103,106,109,112,115,118,120,123,126,129],{"class":67,"line":102},2,[65,104,105],{"class":71},"    return",[65,107,108],{"class":79}," Array.",[65,110,111],{"class":75},"from",[65,113,114],{"class":79},"({ length: n }, (",[65,116,117],{"class":83},"_",[65,119,86],{"class":79},[65,121,122],{"class":83},"i",[65,124,125],{"class":79},") ",[65,127,128],{"class":71},"=>",[65,130,131],{"class":79}," ({\n",[65,133,135],{"class":67,"line":134},3,[65,136,137],{"class":79},"        index: i,\n",[65,139,141],{"class":67,"line":140},4,[65,142,143],{"class":79},"        value:\n",[65,145,147,150,152,155,158],{"class":67,"line":146},5,[65,148,149],{"class":79},"            Array.",[65,151,111],{"class":75},[65,153,154],{"class":79},"({ length: samples }, Math.random).",[65,156,157],{"class":75},"reduce",[65,159,160],{"class":79},"(\n",[65,162,164,167,170,172,175,177,179,182,185],{"class":67,"line":163},6,[65,165,166],{"class":79},"                (",[65,168,169],{"class":83},"a",[65,171,86],{"class":79},[65,173,174],{"class":83},"b",[65,176,125],{"class":79},[65,178,128],{"class":71},[65,180,181],{"class":79}," a ",[65,183,184],{"class":71},"+",[65,186,187],{"class":79}," b\n",[65,189,191,194,197],{"class":67,"line":190},7,[65,192,193],{"class":79},"            ) ",[65,195,196],{"class":71},"/",[65,198,199],{"class":79}," samples,\n",[65,201,203],{"class":67,"line":202},8,[65,204,205],{"class":79},"    }))\n",[65,207,209,212,215,218,220,222,224,226,228,231,234],{"class":67,"line":208},9,[65,210,211],{"class":79},"        .",[65,213,214],{"class":75},"sort",[65,216,217],{"class":79},"((",[65,219,169],{"class":83},[65,221,86],{"class":79},[65,223,174],{"class":83},[65,225,125],{"class":79},[65,227,128],{"class":71},[65,229,230],{"class":79}," a.value ",[65,232,233],{"class":71},"-",[65,235,236],{"class":79}," b.value)\n",[65,238,240,242,245,247,250,252,254],{"class":67,"line":239},10,[65,241,211],{"class":79},[65,243,244],{"class":75},"map",[65,246,217],{"class":79},[65,248,249],{"class":83},"item",[65,251,125],{"class":79},[65,253,128],{"class":71},[65,255,256],{"class":79}," item.index);\n",[65,258,260],{"class":67,"line":259},11,[65,261,262],{"class":79},"}\n",[11,264,265],{},"Here, each index is given an averaged “random value” that dictates its position. More samples = smoother randomness.",[28,267,269],{"id":268},"when-should-you-use-it","When should you use it?",[271,272,273,277,280],"ul",{},[274,275,276],"li",{},"UI Animations: Staggering animations based on weighted randomness can appear more organic.",[274,278,279],{},"Music/Media Shuffling: Avoiding \"bad luck\" when clicking the shuffle button.",[274,281,282],{},"Procedural Generation: Games or simulations where uniform randomness looks artificial.",[28,284,286],{"id":285},"downsides","Downsides",[271,288,289,292],{},[274,290,291],{},"Performance: Slower than fisher-yates",[274,293,294],{},"Bias: Favors the center of the range",[28,296,298],{"id":297},"summary","Summary",[11,300,301],{},"While not a replacement for fisher-yates in most cases, the bates shuffle is a hidden gem for frontend devs aiming for natural-feeling randomness. Sometimes, math that looks less random ends up feeling more real.",[303,304,305],"style",{},"html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":61,"searchDepth":102,"depth":102,"links":307},[308,309,310,311,312],{"id":30,"depth":102,"text":31},{"id":53,"depth":102,"text":54},{"id":268,"depth":102,"text":269},{"id":285,"depth":102,"text":286},{"id":297,"depth":102,"text":298},"2025-07-22T00:00:00.000Z","When developers hear \"shuffle\", we usually think of the Fisher-Yates algorithm — and rightly so. It’s efficient, unbiased, and has been the gold standard for decades. But what if we need randomness that feels more natural?","md",null,{},true,"/article/bates-shuffle",{"title":6,"description":314},"article/bates-shuffle",[],"GAqPfZKSSbA9pLtR6nyIAoTmAZmCRDSIeSxhGEFsJB4",1753183752306]